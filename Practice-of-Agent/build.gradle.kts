import java.util.Properties

plugins {
    kotlin("jvm") version "2.1.20"
}

group = "me.ztiany.agent"
version = "1.0-SNAPSHOT"

repositories {
    maven { url = uri("https://maven.aliyun.com/repository/gradle-plugin") }
    maven { url = uri("https://maven.aliyun.com/repository/public") }
    maven { url = uri("https://maven.aliyun.com/repository/central") }
    maven { url = uri("https://maven.aliyun.com/repository/apache-snapshots") }
    google()
    mavenCentral()
}

dependencies {
    testImplementation(kotlin("test"))
    implementation("com.openai:openai-java:2.7.0")
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1")
}

tasks.test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(11)
}

// 1. 定义生成配置类的任务
tasks.register("generateConfig") {
    // 任务的输入和输出，用于 Gradle 的增量构建
    val inputFile = file("local.properties")
    val outputDir = file("$buildDir/generated/sources/config/java")
    inputs.file(inputFile)
    outputs.dir(outputDir)

    doLast {
        if (!inputFile.exists()) {
            throw GradleException("Input file not found: ${inputFile.path}")
        }

        val props = Properties()
        inputFile.inputStream().use { props.load(it) }

        val packageName = "me.ztiany.llm.config"
        val packageDir = file("$outputDir/${packageName.replace('.', '/')}")
        packageDir.mkdirs()

        val configFile = file("${packageDir.path}/AppConfig.java")
        configFile.writeText(
            """
            package $packageName;

            /**
             * This class is auto-generated by the 'generateConfig' Gradle task.
             * Do not edit it manually.
             */
            public final class AppConfig {
                public static final String API_KEY = "${props.getProperty("api.key")}";
                public static final String API_URL = "${props.getProperty("api.url")}";
            }
        """.trimIndent()
        )

        println("Generated config class: ${configFile.path}")
    }
}

// 2. 将生成代码的目录添加到 main 源集
sourceSets.main.get().java.srcDir("$buildDir/generated/sources/config/java")

// 3. 让 compileJava 任务依赖于我们的生成任务
tasks.named("compileKotlin") {
    dependsOn("generateConfig")
}